name: Run Playwright Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest  # Usamos Ubuntu como sistema operativo para el runner

    services:
      php:
        image: php:8.2-cli  # Usamos la imagen de PHP con CLI
        ports:
          - 8000:8000  # Exponemos el puerto 8000 para que Playwright pueda acceder a la aplicación
        volumes:
          - ./path/to/your/app:/app  # Mapea tu aplicación local a la ruta dentro del contenedor
        working_dir: /app  # Directorio donde se encuentra tu aplicación
        command: php -S 0.0.0.0:8000  # Comando para arrancar el servidor PHP en el puerto 8000

      db:
        image: mysql:8  # Puedes usar MySQL o cualquier base de datos que necesites
        environment:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test_db  # Nombre de la base de datos que vas a usar
        ports:
          - 3306:3306  # Exponer el puerto para la conexión de la base de datos
        volumes:
          - mysql-data:/var/lib/mysql  # Persistencia de datos de la base de datos

    steps:
    - name: Check out repository
      uses: actions/checkout@v3  # Descargamos el código del repositorio

    - name: Set up .NET Core SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0'

    - name: Install dependencies (Playwright)
      run: |
        sudo apt update
        sudo apt install -y wget
        wget https://github.com/microsoft/playwright-cli/releases/download/v1.45.0/playwright-cli-linux-x64.tar.gz
        tar -xvf playwright-cli-linux-x64.tar.gz
        npm install -g playwright # Instalar Playwright globalmente
        npm install  # Asegúrate de tener un package.json con las dependencias necesarias

    - name: Install .NET dependencies
      run: dotnet restore  # Instala las dependencias del proyecto .NET

    - name: Run tests with Playwright
      run: |
        # Espera a que el servidor PHP esté listo y accesible en localhost:8000
        echo "Waiting for PHP server to start..."
        sleep 10  # O ajusta el tiempo según el comportamiento del servidor
        dotnet test  # Ejecuta las pruebas usando .NET
        # Si las pruebas dependen de PHP o la base de datos, este paso las ejecutará

    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: TestResults/test-results.trx  # Guarda los resultados de las pruebas

volumes:
  mysql-data: {}
